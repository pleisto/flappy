name: CSharp Bindings Publish

on:
  workflow_dispatch:
  push:
    #### TODO
    # paths:
    #   - 'packages/rust-core/charp/**'

defaults:
  run:
    working-directory: packages/rust-core/csharp

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: [self-hosted, macOS]
            target: x86_64-apple-darwin
            build: |
              cargo build --target x86_64-apple-darwin

          - host: ubuntu-latest
            target: x86_64-pc-windows-gnu
            build: |
              sudo apt-get install -y gcc-mingw-w64-x86-64-win32
              cargo install cargo-xwin
              cargo build --target x86_64-pc-windows-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e && \
              sudo apt-get update
              sudo apt-get install build-essential perl pkg-config libssl-dev -y
              cargo build --target x86_64-unknown-linux-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              apk add pkgconfig openssl-dev gcc g++ make perl && \
              set -e && \
              cargo build --target x86_64-unknown-linux-musl

          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cargo build --target aarch64-apple-darwin
              
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              sudo apt-get update &&
              sudo apt-get install build-essential -y &&
              sudo apt-get install perl -y &&
              sudo apt-get install pkg-config libssl-dev -y &&
              export LDFLAGS="-L/usr/aarch64-unknown-linux-gnu/lib/gcc/aarch64-unknown-linux-gnu/4.8.5" &&
              export CFLAGS="-fuse-ld=lld -mcrc -B/usr/aarch64-unknown-linux-gnu/lib/gcc/aarch64-unknown-linux-gnu/4.8.5 --sysroot=/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot" &&
              export CXXFLAGS="-fuse-ld=lld -mcrc -B/usr/aarch64-unknown-linux-gnu/lib/gcc/aarch64-unknown-linux-gnu/4.8.5 --sysroot=/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot" &&
              cargo build --target aarch64-unknown-linux-gnu

          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              cargo build --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip packages/rust-core/nodejs/*.node

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              apk add pkgconfig openssl-dev gcc g++ make perl &&
              rustup target add aarch64-unknown-linux-musl &&
              cargo build: --target aarch64-unknown-linux-musl


    name: upload local staging
    uses: actions/upload-artifact@v3
    with:
      name: ${{ matrix.classifier }}-local-staging
      path: |
        packages/rust-core/csharp/target/bindings/*.so
        packages/rust-core/csharp/target/bindings/*.dll
        packages/rust-core/csharp/target/bindings/*.pdb
        packages/rust-core/csharp/target/bindings/*.dylib
      if-no-files-found: error