name: CSharp Bindings Publish

permissions:
  contents: write
  id-token: write

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    #### TODO
    # paths:
    #   - 'packages/rust-core/charp/**'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: [self-hosted, macOS, ARM64]
            target: x86_64-apple-darwin
            build: |
              cargo build --target x86_64-apple-darwin

          - host: ubuntu-latest
            target: x86_64-pc-windows-gnu
            build: |
              sudo apt-get install -y gcc-mingw-w64-x86-64-win32
              cargo install cargo-xwin
              cargo build --target x86_64-pc-windows-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e && \
              sudo apt-get update
              sudo apt-get install build-essential perl pkg-config libssl-dev -y
              cargo build --target x86_64-unknown-linux-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              apk add pkgconfig openssl-dev gcc g++ make perl && \
              set -e && \
              cargo build --target x86_64-unknown-linux-musl

          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cargo build --target aarch64-apple-darwin
              
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              sudo apt-get update &&
              sudo apt-get install build-essential -y &&
              sudo apt-get install perl -y &&
              sudo apt-get install pkg-config libssl-dev -y &&
              export LDFLAGS="-L/usr/aarch64-unknown-linux-gnu/lib/gcc/aarch64-unknown-linux-gnu/4.8.5" &&
              export CFLAGS="-fuse-ld=lld -mcrc -B/usr/aarch64-unknown-linux-gnu/lib/gcc/aarch64-unknown-linux-gnu/4.8.5 --sysroot=/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot" &&
              export CXXFLAGS="-fuse-ld=lld -mcrc -B/usr/aarch64-unknown-linux-gnu/lib/gcc/aarch64-unknown-linux-gnu/4.8.5 --sysroot=/usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot" &&
              cargo build --target aarch64-unknown-linux-gnu

          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              cargo build --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip packages/rust-core/nodejs/*.node

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              apk add pkgconfig openssl-dev gcc g++ make perl &&
              rustup target add aarch64-unknown-linux-musl &&
              cargo build --target aarch64-unknown-linux-musl

    name: build and upload rust code - csharp
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: |
            cd packages/rust-core/csharp
            ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
        working-directory: packages/rust-core/csharp

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            packages/rust-core/target/${{ matrix.settings.target }}/*.dll
            packages/rust-core/target/${{ matrix.settings.target }}/*.pdb
            packages/rust-core/target/${{ matrix.settings.target }}/*.so
            packages/rust-core/target/${{ matrix.settings.target }}/*.dylib
          #if-no-files-found: error
