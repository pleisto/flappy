name: Java Bindings Publish

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'packages/rust-core/java/pom.xml'
      - '.github/workflows/java-bindings-publish.yml'
      - '.github/workflows/java-bindings-publish-common.yml'

defaults:
  run:
    working-directory: packages/rust-core/java

env:
  RUST_BACKTRACE: full
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  check_if_need_release:
    name: java-bindings-publish-version-check
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.compare_version.outputs.release }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      - name: Compare version
        id: compare_version
        run: |
          new_version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          versions=$(curl https://repo1.maven.org/maven2/com/pleisto/flappy-java-bindings/maven-metadata.xml | awk -F'[><]' '/<version>/{print $3}')
          echo "current version: $new_version"
          echo $versions
          if [ -z "${versions[@]}" ]; then
            echo "version is empty"
            exit 1
          fi

          if [[ "${versions[@]}" =~ "${new_version}" ]]; then
            echo "Version is exist."
            echo "release=no" >> "$GITHUB_OUTPUT"
          else
            echo "Version is not exist."
            echo "release=yes" >> "$GITHUB_OUTPUT"
          fi

  stage-snapshot:
    name: java-bindings-publish-stage
    needs: [check_if_need_release]
    if: needs.check_if_need_release.outputs.release == 'yes'
    uses: ./.github/workflows/java-bindings-publish-common.yml
    with:
      environment: Maven
      publish: true
    secrets: inherit

  deploy-staged-snapshots:
    name: java-bindings-publish-release
    runs-on: ubuntu-latest
    needs: [check_if_need_release, stage-snapshot]
    if: needs.check_if_need_release.outputs.release == 'yes'
    timeout-minutes: 60
    environment:
      name: Maven
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Prepare environment variables
        run: echo "LOCAL_STAGING_DIR=$HOME/local-staging" >> $GITHUB_ENV

      - name: Download windows staging directory
        uses: actions/download-artifact@v3
        with:
          name: windows-x86_64-local-staging
          path: ~/windows-x86_64-local-staging

      - name: Download linux staging directory
        uses: actions/download-artifact@v3
        with:
          name: linux-x86_64-local-staging
          path: ~/linux-x86_64-local-staging

      - name: Download linux (aarch64) staging directory
        uses: actions/download-artifact@v3
        with:
          name: linux-aarch_64-local-staging
          path: ~/linux-aarch_64-local-staging

      - name: Download linux_musl staging directory
        uses: actions/download-artifact@v3
        with:
          name: linux_musl-x86_64-local-staging
          path: ~/linux_musl-x86_64-local-staging

      - name: Download linux_musl (aarch64) staging directory
        uses: actions/download-artifact@v3
        with:
          name: linux_musl-aarch_64-local-staging
          path: ~/linux_musl-aarch_64-local-staging

      - name: Download darwin staging directory
        uses: actions/download-artifact@v3
        with:
          name: osx-x86_64-local-staging
          path: ~/osx-x86_64-local-staging

      - name: Download darwin (aarch64) staging directory
        uses: actions/download-artifact@v3
        with:
          name: osx-aarch_64-local-staging
          path: ~/osx-aarch_64-local-staging

      - name: Merge staging repositories
        run: |
          bash tools/merge_local_staging.sh $LOCAL_STAGING_DIR/staging \
            ~/windows-x86_64-local-staging/staging \
            ~/linux-x86_64-local-staging/staging \
            ~/linux-aarch_64-local-staging/staging \
            ~/linux_musl-x86_64-local-staging/staging \
            ~/linux_musl-aarch_64-local-staging/staging \
            ~/osx-x86_64-local-staging/staging \
            ~/osx-aarch_64-local-staging/staging

      - name: Deploy local staged artifacts
        run: |
          ./mvnw org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged \
            -DaltStagingDirectory=$LOCAL_STAGING_DIR \
            -DserverId=ossrh \
            -DnexusUrl=https://s01.oss.sonatype.org
        env:
          MAVEN_USERNAME: ${{ vars.ORG_GRADLE_PROJECT_MAVENCENTRALUSERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALPASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
